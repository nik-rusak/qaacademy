import org.testng.Assert;
import org.testng.annotations.Test;

import static org.testng.Assert.*;

/**
 * Created by n.rusak on 24.11.2015.
 */
public class PenTest {

    @Test
    public void testGetColorBlack() throws Exception {
        Assert.assertEquals(new Pen(1000,1,"BLACK").getColor(), "BLACK");
    }
    @Test
    public void testGetColorBlue() throws Exception {
        Assert.assertEquals(new Pen(1000, 1, "BLUE").getColor(),"BLUE");
    }

    @Test
    public void testGetColorNull() throws Exception {
        Assert.assertEquals(new Pen(1000, 1, "").getColor(), "");
    }                       
    @Test
    public void testIsWorkPositive() throws Exception {
        assertTrue(new Pen(1000, 1, "GREEN").isWork());
    }
    @Test
    public void testIsWorkNegative() throws Exception {
        assertFalse(new Pen(-1000, 1, "GREEN").isWork());
    }
    @Test
    public void testIsWorkNull() throws Exception {
        assertFalse(new Pen(0, 1, "GREEN").isWork());
    }
    @Test
    public void testWriteEmptyPen() throws Exception {
        Assert.assertEquals(new Pen(0, 1, "BLACK").write("Something"), "");
    }
    @Test
    public void testWriteNull() throws Exception {
        Assert.assertEquals(new Pen(1000,1,"BLACK").write(""), "");
    }
    @Test
    public void testWriteUsual() throws Exception {
        Assert.assertEquals(new Pen(200,1,"BLACK").write("Something"), "Something");
    }
    @Test
    public void testWriteNotEnough() throws Exception {
        Assert.assertEquals(new Pen(2,1,"BLACK").write("Something"), "So");
    }
    @Test
    public void testWriteNotEnoughBigLetters() throws Exception {
        Assert.assertEquals(new Pen(6,3,"BLACK").write("Something"), "So");
    }
    @Test
    public void testWriteEnoughBigLetters() throws Exception {
        Assert.assertEquals(new Pen(1000,2,"BLACK").write("Something"), "Something");
    }
    @Test
    public void testWriteNegativeInk() throws Exception {
        Assert.assertEquals(new Pen(-1,1,"BLACK").write("Something"), "");
    }
    @Test
    public void testWriteNegativeSize() throws Exception {
        Assert.assertEquals(new Pen(10,-1,"BLACK").write("Something"), "");
    }
    @Test
    public void testWriteNullSize() throws Exception {
        Assert.assertEquals(new Pen(10,0,"BLACK").write("Something"), "");
    }
    @Test
    public void testWriteSecondWord() throws Exception {
        Pen pen = new Pen(100,1,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "world");
    }
    @Test
    public void testWriteSecondWordNotEnough() throws Exception {
        Pen pen = new Pen(6,1,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "w");
    }
    @Test
    public void testWriteSecondWordNotEnoughBigLetters() throws Exception {
        Pen pen = new Pen(12,2,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "w");
    }

    @Test
    public void testWriteSecondWordEmpty() throws Exception {
        Pen pen = new Pen(5,1,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "");
    }
    @Test
    public void testWriteSecondWordNegativeInk() throws Exception {
        Pen pen = new Pen(-1,1,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "");
    }
    @Test
    public void testWriteSecondWordNegativeSize() throws Exception {
        Pen pen = new Pen(1,-1,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "");
    }
    @Test
    public void testWriteSecondWordNullSize() throws Exception {
        Pen pen = new Pen(1,0,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "");
    }
    @Test
    public void testWriteSecondWordEnoughBigLetters() throws Exception {
        Pen pen = new Pen(20,2,"BLACK");
        pen.write("Hello");
        Assert.assertEquals(pen.write("world"), "world");
    }
    @Test
    public void testWriteSecondWordEnoughSmallLetters() throws Exception {
        Pen pen = new Pen(1,0.2,"BLACK");
        pen.write("Test");
        Assert.assertEquals(pen.write("Test1"), "T");
    }
}